"use strict";(self.webpackChunkhydro_dev_github_io=self.webpackChunkhydro_dev_github_io||[]).push([[598],{4685:(e,r,t)=>{t.r(r),t.d(r,{data:()=>i});const i=JSON.parse('{"key":"v-5e09d0a1","path":"/docs/user/permission.html","title":"权限系统","lang":"en-US","frontmatter":{"description":"Hydro 的权限系统使用双层结构，分别为 Privilege (PRIV) 和 Permission (PERM)。 权限在系统内部使用位运算表示，具体的定义与数值可以查看 源代码 (https://github.com/hydro-dev/Hydro/blob/master/packages/hydrooj/src/model/builtin.ts...","head":[["meta",{"property":"og:url","content":"https://hydro.js.org/docs/user/permission.html"}],["meta",{"property":"og:site_name","content":"Hydro"}],["meta",{"property":"og:title","content":"权限系统"}],["meta",{"property":"og:description","content":"Hydro 的权限系统使用双层结构，分别为 Privilege (PRIV) 和 Permission (PERM)。 权限在系统内部使用位运算表示，具体的定义与数值可以查看 源代码 (https://github.com/hydro-dev/Hydro/blob/master/packages/hydrooj/src/model/builtin.ts..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-05T10:51:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-05T10:51:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"权限系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-05T10:51:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Privilege","slug":"privilege","link":"#privilege","children":[]},{"level":2,"title":"Permission","slug":"permission","link":"#permission","children":[]},{"level":2,"title":"角色","slug":"角色","link":"#角色","children":[]},{"level":2,"title":"加入域","slug":"加入域","link":"#加入域","children":[]}],"git":{"createdTime":1704446362000,"updatedTime":1704451890000,"contributors":[{"name":"undefined","email":"i@undefined.moe","commits":2}]},"readingTime":{"minutes":1.67,"words":502},"filePathRelative":"docs/user/permission.md","localizedDate":"January 5, 2024","autoDesc":true,"excerpt":""}')},4323:(e,r,t)=>{t.r(r),t.d(r,{default:()=>d});var i=t(6252);const o=(0,i._)("h1",{id:"权限系统",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#权限系统"},[(0,i._)("span",null,"权限系统")])],-1),n=(0,i._)("br",null,null,-1),a={href:"https://github.com/hydro-dev/Hydro/blob/master/packages/hydrooj/src/model/builtin.ts",target:"_blank",rel:"noopener noreferrer"},s=(0,i.uE)('<h2 id="privilege" tabindex="-1"><a class="header-anchor" href="#privilege"><span>Privilege</span></a></h2><p>Privilege 是用户在整套系统内拥有的权限，在所有域均生效。如创建用户，编辑系统设置，创建域，查看域等等。</p><p>特别地，<code>PRIV.PRIV_USER_PROFILE</code> 控制一个账号是否能够作为普通账号登录。若不具有此权限，该账号将无法登录（被封禁）。</p><h2 id="permission" tabindex="-1"><a class="header-anchor" href="#permission"><span>Permission</span></a></h2><p>Permission 是用户在单个域内拥有的权限，如创建题目/比赛，发布/删除讨论等等。</p><p>如果 <code>PERM.PERM_VIEW</code> 被禁用，则该用户无法查看此域。</p><h2 id="角色" tabindex="-1"><a class="header-anchor" href="#角色"><span>角色</span></a></h2><p>通常我们需要给特定的一组用户分配相同的权限。在用户量较多的时候这会非常混乱难以管理，为此我们设计了【角色】，便于批量操作与管理。<br> 角色是针对域内权限（PERM）的。在系统内置了三个角色：</p><ul><li>guest （对未登录用户生效，含已封禁用户）</li><li>default （对所有未指定角色的用户生效，包括未加入域的用户）</li><li>root （拥有所有权限）</li></ul><p>通查情况下，如果需要对域做特殊的权限控制，应当新建一个用户组（例如 member）并将选定用户加入该用户组。<br> 将角色移出域和将用户的角色设置为 default 是等价的。<br> 若有需要，您也可以创建 teacher, admin 等其他角色。<br> 考虑到系统中的用户可能非常多（数万甚至数十万），在用户列表中仅会显示权限不为 default 的用户。</p><h2 id="加入域" tabindex="-1"><a class="header-anchor" href="#加入域"><span>加入域</span></a></h2><p>加入域的过程实际上是 <strong>用户通过某种方式自助将自己的权限组由 default 变更到另一权限组（如member）</strong> 的过程。<br> 因此在入域申请链接的权限组中选择 guest 和 default 是没有意义的。</p>',12),l={},d=(0,t(3744).Z)(l,[["render",function(e,r){const t=(0,i.up)("ExternalLinkIcon");return(0,i.wg)(),(0,i.iD)("div",null,[o,(0,i._)("p",null,[(0,i.Uk)("Hydro 的权限系统使用双层结构，分别为 Privilege (PRIV) 和 Permission (PERM)。"),n,(0,i.Uk)(" 权限在系统内部使用位运算表示，具体的定义与数值可以查看 "),(0,i._)("a",a,[(0,i.Uk)("源代码"),(0,i.Wm)(t)]),(0,i.Uk)(" 。")]),s])}]])},3744:(e,r)=>{r.Z=(e,r)=>{const t=e.__vccOpts||e;for(const[e,i]of r)t[e]=i;return t}}}]);